PowerShell 7.3.1
PS C:\Users\lunda> mongosh localhost:270
Current Mongosh Log ID: 63da30f68daf57537d19244f
Connecting to:          mongodb://localhost:270/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.6.2
MongoNetworkError: connect ECONNREFUSED 127.0.0.1:270
PS C:\Users\lunda> mongosh localhost:27030
Current Mongosh Log ID: 63da31013a4636ac1b6efb2d
Connecting to:          mongodb://localhost:27030/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.6.2
Using MongoDB:          6.0.4
Using Mongosh:          1.6.2

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2023-02-01T10:18:15.691+01:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

Warning: Found ~/.mongorc.js, but not ~/.mongoshrc.js. ~/.mongorc.js will not be loaded.
  You may want to copy or rename ~/.mongorc.js to ~/.mongoshrc.js.
[direct: mongos] test> use NGD_Project
switched to db NGD_Project
[direct: mongos] NGD_Project> show collections
collection
[direct: mongos] NGD_Project> sh.enableSharding("NGD_Project")
{
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675243980, i: 1 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675243980, i: 1 })
}
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently running': 'no',
  'Currently enabled': 'yes',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {}
  }
]
[direct: mongos] NGD_Project> db.dropCollection("collection")
TypeError: db.dropCollection is not a function
[direct: mongos] NGD_Project> db.drop("collection")
TypeError: db.drop is not a function
[direct: mongos] NGD_Project> db.collection.drop()
true
[direct: mongos] NGD_Project> db.createCollection("sharded_coll")
{ ok: 1 }
[direct: mongos] NGD_Project> db.sharded_coll.createIndex({shard_value: -1})
shard_value_-1
[direct: mongos] NGD_Project> db.sharded_coll.insertOne({name: "x", value: 0, shard_value: 0})
{
  acknowledged: true,
  insertedId: ObjectId("63da32f64817f21580cf93c6")
}
[direct: mongos] NGD_Project> db.sharded_coll.ensureIndex({shard_value: "hashed"})
[ 'shard_value_hashed' ]
[direct: mongos] NGD_Project> db.sharded_coll.insertOne({name: "y", value: 0, shard_value: 1})
{
  acknowledged: true,
  insertedId: ObjectId("63da33804817f21580cf93c7")
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
MongoshInvalidInputError: [SHAPI-10001] Collection sharded_coll is not sharded
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.sharded_coll", {shard_value : "hashed"})
{
  collectionsharded: 'NGD_Project.sharded_coll',
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675244517, i: 17 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675244517, i: 13 })
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'Shard shard_b': [
    '100 % data',
    '100 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'Shard shard_b': [
    '100 % data',
    '100 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> db.printShardingStatus()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> sh.status.sharding_version

[direct: mongos] NGD_Project> sh.status.sharding_version()
TypeError: sh.status.sharding_version is not a function
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> sh.startBalancer()
{
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675245593, i: 6 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675245593, i: 6 })
}
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> sh.startBalancer()
{
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675245631, i: 2 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675245631, i: 2 })
}
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> db.printShardingStatus()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'Shard shard_b': [
    '100 % data',
    '100 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
MongoshInvalidInputError: [SHAPI-10001] Collection sharded_coll is not sharded
[direct: mongos] NGD_Project> use NGD_Project
already on db NGD_Project
[direct: mongos] NGD_Project> db.sharded_coll.createIndex({shard_value: 1})
shard_value_1
[direct: mongos] NGD_Project> db.sharded_coll.insertOne({name: "x", value: 0, shard_value: 0})
{
  acknowledged: true,
  insertedId: ObjectId("63da390a4817f21580cf93c8")
}
[direct: mongos] NGD_Project> db.sharded_coll.insertOne({name: "y", value: 0, shard_value: 1})
{
  acknowledged: true,
  insertedId: ObjectId("63da39124817f21580cf93c9")
}
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.sharded_coll", {shard_value : 1})
{
  collectionsharded: 'NGD_Project.sharded_coll',
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675245882, i: 21 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675245882, i: 17 })
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'Shard shard_b': [
    '100 % data',
    '100 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> mongoimport
ReferenceError: mongoimport is not defined
[direct: mongos] NGD_Project> show collections
ristoranti
sharded_coll
[direct: mongos] NGD_Project> db.ristoranti.count()
DeprecationWarning: Collection.count() is deprecated. Use countDocuments or estimatedDocumentCount.
3772
[direct: mongos] NGD_Project> db.ristoranti.countDocuments()
3772
[direct: mongos] NGD_Project> db.ristoranti.countDocuments({borough: "Brooklyn"})
684
[direct: mongos] NGD_Project> db.ristoranti.createIndex({borough: 1})
borough_1
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.ristoranti", {borough: "hashed"})
MongoServerError: Please create an index that starts with the proposed shard key before sharding the collection
[direct: mongos] NGD_Project> db.ristoranti.removeIndex({borough: 1})
TypeError: db.ristoranti.removeIndex is not a function
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({borough})
ReferenceError: borough is not defined
[direct: mongos] NGD_Project> db.ristoranti.dropIndex(borough)
ReferenceError: borough is not defined
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({borough: 1})
{
  raw: {
    'shard_b/localhost:27024,localhost:27025,localhost:27026': { nIndexesWas: 2, ok: 1 }
  },
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675246721, i: 1 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675246721, i: 1 })
}
[direct: mongos] NGD_Project> db.ristoranti.createIndex({borough: "text", "_id": "hashed"})
MongoServerError: Error in specification { name: "borough_text__id_hashed", key: { borough: "text", _id: "hashed" } } :: caused by :: Can't use more than one index plugin for a single index.
[direct: mongos] NGD_Project> db.ristoranti.createIndex({borough: "hashed", "_id": "hashed"})
MongoServerError: Index build failed: 8db49f78-2343-4a83-8cd1-bee26ac9e6fa: Collection NGD_Project.ristoranti ( 00f65603-d5c2-4d7b-8ce6-c054af3c79e6 ) :: caused by :: Caught exception during index builder (8db49f78-2343-4a83-8cd1-bee26ac9e6fa) initialization on namespaceNGD_Project.ristoranti (00f65603-d5c2-4d7b-8ce6-c054af3c79e6). 1 index specs provided. First index spec: { v: 2, key: { borough: "hashed", _id: "hashed" }, name: "borough_hashed__id_hashed" } :: caused by :: A maximum of one index field is allowed to be hashed but found 2 for 'key' { borough: "hashed", _id: "hashed" }
[direct: mongos] NGD_Project> db.ristoranti.createIndex({borough: "hashed"})
borough_hashed
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.ristoranti", {borough})
ReferenceError: borough is not defined
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.ristoranti", {borough_hashed})
ReferenceError: borough_hashed is not defined
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.ristoranti", {borough: "hashed"})
{
  collectionsharded: 'NGD_Project.ristoranti',
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675246904, i: 25 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675246904, i: 21 })
}
[direct: mongos] NGD_Project> db.printShardStatus()
TypeError: db.printShardStatus is not a function
[direct: mongos] NGD_Project> sh.status()
shardingVersion
{
  _id: 1,
  minCompatibleVersion: 5,
  currentVersion: 6,
  clusterId: ObjectId("63d81ce7db249f9a17fd2d30")
}
---
shards
[
  {
    _id: 'shard_a',
    host: 'shard_a/localhost:27021,localhost:27022,localhost:27023',
    state: 1,
    topologyTime: Timestamp({ t: 1675107571, i: 5 })
  },
  {
    _id: 'shard_b',
    host: 'shard_b/localhost:27024,localhost:27025,localhost:27026',
    state: 1,
    topologyTime: Timestamp({ t: 1675107576, i: 11 })
  }
]
---
active mongoses
[ { '6.0.4': 1 } ]
---
autosplit
{ 'Currently enabled': 'yes' }
---
balancer
{
  'Currently enabled': 'yes',
  'Currently running': 'no',
  'Failed balancer rounds in last 5 attempts': 0,
  'Migration Results for the last 24 hours': 'No recent migrations'
}
---
databases
[
  {
    database: { _id: 'config', primary: 'config', partitioned: true },
    collections: {
      'config.system.sessions': {
        shardKey: { _id: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_a', nChunks: 1024 } ],
        chunks: [
          'too many chunks to print, use verbose if you want to force print'
        ],
        tags: []
      }
    }
  },
  {
    database: {
      _id: 'NGD_Project',
      primary: 'shard_b',
      partitioned: false,
      version: {
        uuid: new UUID("93d60c9c-6ab5-4135-9871-a749cb5bb05b"),
        timestamp: Timestamp({ t: 1675243146, i: 1 }),
        lastMod: 1
      }
    },
    collections: {
      'NGD_Project.ristoranti': {
        shardKey: { borough: 'hashed' },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { borough: MinKey() }, max: { borough: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      },
      'NGD_Project.sharded_coll': {
        shardKey: { shard_value: 1 },
        unique: false,
        balancing: true,
        chunkMetadata: [ { shard: 'shard_b', nChunks: 1 } ],
        chunks: [
          { min: { shard_value: MinKey() }, max: { shard_value: MaxKey() }, 'on shard': 'shard_b', 'last modified': Timestamp({ t: 1, i: 0 }) }
        ],
        tags: []
      }
    }
  }
]
[direct: mongos] NGD_Project> db.ristoranti.drop()
true
[direct: mongos] NGD_Project> db.ristoranti.createIndex({borough: "text"})
borough_text
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.ristoranti", {borough: "text"})
MongoServerError: Shard key { borough: "text" } can contain at most one 'hashed' field, and/or multiple numerical fields set to a value of 1. Failed to parse field borough
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({borough: "text"})
MongoshInternalError: can't find index with key: { borough: "text" }
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({borough: "text"})
MongoshInternalError: can't find index with key: { borough: "text" }
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({ borough: "text" })
MongoshInternalError: can't find index with key: { borough: "text" }
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({borough: 1})
MongoshInternalError: can't find index with key: { borough: 1 }
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({borough: "text"})
MongoshInternalError: can't find index with key: { borough: "text" }
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({"borough": "text"})
MongoshInternalError: can't find index with key: { borough: "text" }
[direct: mongos] NGD_Project> db.ristoranti.dropIndex({"borough"})
Uncaught:
SyntaxError: Unexpected token (1:34)

> 1 | db.ristoranti.dropIndex({"borough"})
    |                                   ^
  2 |

[direct: mongos] NGD_Project> db.ristoranti.dropIndex("borough")
MongoshInternalError: index not found with name [borough]
[direct: mongos] NGD_Project> db.ristoranti.dropIndex("borough_text")
{
  raw: {
    'shard_b/localhost:27024,localhost:27025,localhost:27026': { nIndexesWas: 2, ok: 1 }
  },
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675247306, i: 2 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675247306, i: 2 })
}
[direct: mongos] NGD_Project> sh.listShards

[direct: mongos] NGD_Project> sh.listShards()
TypeError: sh.listShards is not a function
[direct: mongos] NGD_Project> db.ristoranti.createIndex({borough: 1})
borough_1
[direct: mongos] NGD_Project> sh.shardCollection("NGD_Project.ristoranti", {borough: 1})
{
  collectionsharded: 'NGD_Project.ristoranti',
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675247569, i: 20 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675247569, i: 16 })
}
[direct: mongos] NGD_Project> db.printShardStatus()
TypeError: db.printShardStatus is not a function
[direct: mongos] NGD_Project> db.ristoranti.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '1.69MiB',
  docs: 3772,
  chunks: 1,
  'estimated data per chunk': '1.69MiB',
  'estimated docs per chunk': 3772
}
---
Totals
{
  data: '1.69MiB',
  docs: 3772,
  chunks: 1,
  'Shard shard_b': [
    '100 % data',
    '100 % docs in cluster',
    '470B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.adminCommand({ split: "NGD_Project.sharded_coll", middle : {}})
MongoServerError: need to specify find/bounds or middle
[direct: mongos] NGD_Project> db.adminCommand({ split: "NGD_Project.sharded_coll", middle : {value: 1}})
MongoServerError: new split key { value: 1 } is not valid for shard key pattern { shard_value: 1 }
[direct: mongos] NGD_Project> db.adminCommand({ split: "NGD_Project.sharded_coll", middle : {shard_value: 1}})
{
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675247935, i: 4 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675247935, i: 4 })
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 2,
  'estimated data per chunk': '62B',
  'estimated docs per chunk': 1
}
---
Totals
{
  data: '124B',
  docs: 2,
  chunks: 2,
  'Shard shard_b': [
    '100 % data',
    '100 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.adminCommand({ moveChunk: "NGD_Project", find: {shard_value: 1}, to: "shard_a"})
MongoServerError: Invalid namespace specified 'NGD_Project'
[direct: mongos] NGD_Project> db.adminCommand({ moveChunk: "NGD_Project.sharded_coll", find: {shard_value: 1}, to: "shard_a"})
{
  millis: 2924,
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675248153, i: 19 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675248153, i: 19 })
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_a at shard_a/localhost:27021,localhost:27022,localhost:27023
{
  data: '62B',
  docs: 1,
  chunks: 1,
  'estimated data per chunk': '62B',
  'estimated docs per chunk': 1
}
---
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '186B',
  docs: 3,
  chunks: 2,
  'Shard shard_a': [
    '33.33 % data',
    '33.33 % docs in cluster',
    '62B avg obj size on shard'
  ],
  'Shard shard_b': [
    '66.66 % data',
    '66.66 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Shard shard_a at shard_a/localhost:27021,localhost:27022,localhost:27023
{
  data: '62B',
  docs: 1,
  chunks: 1,
  'estimated data per chunk': '62B',
  'estimated docs per chunk': 1
}
---
Totals
{
  data: '186B',
  docs: 3,
  chunks: 2,
  'Shard shard_b': [
    '66.66 % data',
    '66.66 % docs in cluster',
    '62B avg obj size on shard'
  ],
  'Shard shard_a': [
    '33.33 % data',
    '33.33 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_a at shard_a/localhost:27021,localhost:27022,localhost:27023
{
  data: '62B',
  docs: 1,
  chunks: 1,
  'estimated data per chunk': '62B',
  'estimated docs per chunk': 1
}
---
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '186B',
  docs: 3,
  chunks: 2,
  'Shard shard_a': [
    '33.33 % data',
    '33.33 % docs in cluster',
    '62B avg obj size on shard'
  ],
  'Shard shard_b': [
    '66.66 % data',
    '66.66 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_a at shard_a/localhost:27021,localhost:27022,localhost:27023
{
  data: '62B',
  docs: 1,
  chunks: 1,
  'estimated data per chunk': '62B',
  'estimated docs per chunk': 1
}
---
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Totals
{
  data: '186B',
  docs: 3,
  chunks: 2,
  'Shard shard_a': [
    '33.33 % data',
    '33.33 % docs in cluster',
    '62B avg obj size on shard'
  ],
  'Shard shard_b': [
    '66.66 % data',
    '66.66 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> db.sharded_coll.getShardDistribution()
Shard shard_b at shard_b/localhost:27024,localhost:27025,localhost:27026
{
  data: '124B',
  docs: 2,
  chunks: 1,
  'estimated data per chunk': '124B',
  'estimated docs per chunk': 2
}
---
Shard shard_a at shard_a/localhost:27021,localhost:27022,localhost:27023
{
  data: '62B',
  docs: 1,
  chunks: 1,
  'estimated data per chunk': '62B',
  'estimated docs per chunk': 1
}
---
Totals
{
  data: '186B',
  docs: 3,
  chunks: 2,
  'Shard shard_b': [
    '66.66 % data',
    '66.66 % docs in cluster',
    '62B avg obj size on shard'
  ],
  'Shard shard_a': [
    '33.33 % data',
    '33.33 % docs in cluster',
    '62B avg obj size on shard'
  ]
}
[direct: mongos] NGD_Project> sh.isBalancerRunning()
{
  mode: 'full',
  inBalancerRound: false,
  numBalancerRounds: Long("526"),
  term: Long("6"),
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1675248374, i: 1 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1675248374, i: 1 })
}
[direct: mongos] NGD_Project>